# Redis HA Performance Testing Infrastructure
# No version specified - uses latest Docker Compose format

networks:
  redis-network:
    driver: bridge

services:
  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./redis/master.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis Replicas
  redis-replica-1:
    image: redis:7-alpine
    container_name: redis-replica-1
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./redis/replica-1.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis-replica-2:
    image: redis:7-alpine
    container_name: redis-replica-2
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./redis/replica-2.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Sentinel Nodes
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: redis-sentinel-1
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./sentinel/sentinel-1.conf:/usr/local/etc/redis/sentinel.conf
    command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf"]
    depends_on:
      redis-master:
        condition: service_healthy
      redis-replica-1:
        condition: service_healthy
      redis-replica-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  redis-sentinel-2:
    image: redis:7-alpine
    container_name: redis-sentinel-2
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./sentinel/sentinel-2.conf:/usr/local/etc/redis/sentinel.conf
    command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf"]
    depends_on:
      redis-master:
        condition: service_healthy
      redis-replica-1:
        condition: service_healthy
      redis-replica-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  redis-sentinel-3:
    image: redis:7-alpine
    container_name: redis-sentinel-3
    networks:
      - redis-network
    restart: unless-stopped
    volumes:
      - ./sentinel/sentinel-3.conf:/usr/local/etc/redis/sentinel.conf
    command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf"]
    depends_on:
      redis-master:
        condition: service_healthy
      redis-replica-1:
        condition: service_healthy
      redis-replica-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Memtier Benchmark - Performance Testing Tool
  memtier-benchmark:
    image: redislabs/memtier_benchmark:latest
    container_name: memtier-benchmark
    networks:
      - redis-network
    restart: "no"
    depends_on:
      redis-sentinel-1:
        condition: service_healthy
      redis-sentinel-2:
        condition: service_healthy
      redis-sentinel-3:
        condition: service_healthy
    volumes:
      - ./results:/results
    environment:
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - MASTER_NAME=mymaster
    # Keep container running for exec commands
    command: ["tail", "-f", "/dev/null"]
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Monitoring - Redis Exporters
  redis-exporter-master:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-master
    networks:
      - redis-network
    restart: unless-stopped
    command: --redis.addr=redis-master:6379
    depends_on:
      redis-master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  redis-exporter-replica-1:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-replica-1
    networks:
      - redis-network
    restart: unless-stopped
    command: --redis.addr=redis-replica-1:6379
    depends_on:
      redis-replica-1:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  redis-exporter-replica-2:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-replica-2
    networks:
      - redis-network
    restart: unless-stopped
    command: --redis.addr=redis-replica-2:6379
    depends_on:
      redis-replica-2:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - redis-network
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - redis-network
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
